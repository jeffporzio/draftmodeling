
To decide value: 
    use data from MC sims to know what 1st, 2nd, 3rd, thresholds are for each category to predice the 
    increased value that player adds to the team. 

NN: 
    Use NN to predict value of a player based on all the data we have 
        (Player stats, team's current stats, money, number of players, 
            maybe historical data about each threshhold
            Other team's stats? Probably.
        )

    Rough flow: 
    while true: 
        Do draft with NN deciding value of each player
        Do a league to see how each team scores
        Organize the results of the league's scores into training set data
        Train NN with that data, repeat

    Things we need: 
    - Idea of what the NN should use
    - Tools to convert the league results into training data
        + What training data it needs 
    -  Can I turn the 23+ decisions the NN made into useful data? Q-Learning?

    - Decide who wins what points for a league and report that 

    - Better to have the NN predict value and have a separate algo do the auctioning? I think yes.

    - Separate agents for valuing the next player to pick when it's our turn?

https://medium.com/@awjuliani/simple-reinforcement-learning-with-tensorflow-part-4-deep-q-networks-and-beyond-8438a3e2b8df

https://github.com/awjuliani/DeepRL-Agents/blob/master/Double-Dueling-DQN.ipynb

https://www.tensorflow.org/agents/tutorials/0_intro_rl DQN Not suitable to problem 

https://pemami4911.github.io/blog/2016/08/21/ddpg-rl.html


Pulling in data: 
Match 15th - Oct 15th Just 2019


%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Daily League:       %%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%
Either generic algorithm to "optimize" the team 
Or NN to make thousands of examples every day, then train with the "answers" the next day? 
 - Can this be done retroactively using the daily data? I think so. 
Probably too large of a parameter space

Approach 1: 
Use genetic algo to pick optimal team based on raw data
Pros: Easy, fast 
Cons: Doesn't have a way to account for randomness in player performance
player data --> projections to points conversion --> build a team based on those points

Approach 2: 
Train NN to predict player's values based on raw data and use that as an input to the optimization problem 
Pros: Allows us to try and predict player performance somehow.  
Cons: Requires learning TF. Not entierly sure the NN will be successful. 
Training:
players data --> NN which predicts points for that player that day
actual next day data --> Used to construct training data 
Usage: 
Replace "projections to points conversion" in approach 1 with the predictive algorithm

Approach 3: 
Train NN to pick an entire team based on the raw data 
Pros: Probably the most promising. 
Cons: Too large of a parameter space.


Code Approach 1, eventually generate enough datat to try Approach 2



### Hosting a webiste 
Droplet from digital ocean $5/mo (get the smallest one for now)
Google Domains One time cost + $5/yr
VMWare for sshing into the container
Google: "Digital Ocean Nginx guide"


