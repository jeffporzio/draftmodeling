{"version":3,"file":"my-counter.js","sourceRoot":"","sources":["../../../src/components/my-counter/my-counter.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,IAAI,EAAiB,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAC,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAChD,OAAO,EAAE,cAAc,EAAE,MAAM,2CAA2C,CAAC;AAC3E,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAGnC,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAWU,mBAAc,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;IAqBrD,CAAC;IAnBU,MAAM;QACb,OAAO,IAAI,CAAA;wBACS,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;cAC/C,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK;wBAC7B,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;KACxD,CAAC;IACJ,CAAC;IAEQ,iBAAiB;QACxB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QAE5B,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,KAAU,EAAE,EAAE;YAC5C,IAAI,KAAK,CAAC,OAAO,EAAC;gBAChB,IAAI,CAAC,aAAa,EAAE,CAAC;aACtB;QACL,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,iBAAiB,EAAE,CAAC;IAC9B,CAAC;CACA,CAAA;AA9BiB,gBAAM,GAAG,GAAG,CAAA;;;;;;;CAO5B,CAAA;AATI,SAAS;IADd,aAAa,CAAC,YAAY,CAAC;GACtB,SAAS,CAgCd;AAED,OAAM,EAAE,SAAS,EAAE,CAAA","sourcesContent":["import {LitElement, css } from 'lit';\r\nimport {html, TemplateResult} from \"lit-html\";\r\nimport {customElement} from 'lit/decorators.js';\r\nimport { counterMachine } from \"../../model/xstate-counter/xstate-counter\";\r\nimport { interpret } from \"xstate\";\r\n\r\n@customElement('my-counter')\r\nclass MyCounter extends LitElement {\r\n\r\n  static override styles = css`\r\n  :host {\r\n    display: block;\r\n    border: solid 1px gray;\r\n    padding: 16px;\r\n    max-width: 800px;\r\n  }\r\n`;\r\n\r\n  private counterMachine = interpret(counterMachine);\r\n\r\n  override render(): TemplateResult {\r\n    return html`\r\n      <button @click=\"${() => this.counterMachine.send(\"DEC\")}\">-</button>\r\n      <span>${this.counterMachine.state.context.count}</span>\r\n      <button @click=\"${() => this.counterMachine.send('INC')}\">+</button>\r\n    `;\r\n  }\r\n\r\n  override connectedCallback(): void {\r\n    this.counterMachine.start();\r\n\r\n    this.counterMachine.onTransition((state: any) => {\r\n        if (state.changed){ \r\n          this.requestUpdate();\r\n        }\r\n    });\r\n\r\n    super.connectedCallback();\r\n}\r\n}\r\n\r\nexport{ MyCounter }"]}